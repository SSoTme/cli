/*******************************************
 Initially Generated by SSoT.me - codee42 & odxml42
 Created By: EJ Alexandra - 2017
             An Abstract Level, llc
 License:    Mozilla Public License 2.0
 *******************************************/
using AIC.Lib.DataClasses;
using AIC.SassyMQ.Lib;
using AICapture.OST.Lib.AICapture.DataClasses;
using Newtonsoft.Json;
using SassyMQ.SSOTME.Lib;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace SSoTme.OST.Lib.CLIOptions
{
    public class AICManager
    {
        public string Auth0SID { get; private set; }

        internal static AICManager Create(string auth0SID)
        {
            var aicm = new AICManager();
            aicm.Auth0SID = auth0SID;
            return aicm;
        }

        public void Start()
        {
            this.FindMostRecentProject();
            while (!Console.KeyAvailable)
            {
                try
                {
                    Console.WriteLine("Starting DM QUEUE...");
                    var aica = new SMQAICAgent("amqps://smqPublic:smqPublic@effortlessapi-rmq.ssot.me/ej-aicapture-io");
                    try
                    {
                        aica.UserAICInstallReceived += Aica_UserAICInstallReceived;
                        aica.UserAICReplayReceived += Aica_UserAICReplayReceived;
                        aica.UserSetDataReceived += Aica_UserSetDataReceived;
                        aica.UserGetDataReceived += Aica_UserGetDataReceived;
                        UpdateDMQueue(aica);

                        Console.WriteLine($"Listening on DMQueue: {aica.QueueName}. Press Ctrl+C to end.");
                        var count = 0;
                        while (aica.RMQConnection.IsOpen)
                        {
                            if (count++ % 300 == 0)
                            {
                                UpdateDMQueue(aica);
                            }
                            aica.WaitForComplete(1000, false);
                        }

                    }
                    finally
                    {
                        if (!aica.RMQConnection.IsOpen)
                        {
                            Console.WriteLine($"{DateTime.Now}-closed.");
                            object o = 1;
                        }

                        aica.Disconnect();
                    }
                }
                catch (Exception ex)
                {
                    // ignore errors
                    Console.WriteLine($"Error: {ex.Message} Waiting 5 seconds to try again.");
                    System.Threading.Thread.Sleep(5000);
                }
            }
            Console.ReadKey();
        }

        private void UpdateDMQueue(SMQAICAgent aica)
        {
            var payload = aica.CreatePayload();
            payload.AccessToken = this.Auth0SID;
            payload.DMQueue = aica.QueueName;
            Console.WriteLine($"Register DM Queue: {payload.DMQueue}");
            var task = aica.MonitoringFor(payload, (reply, bdea) =>
            {
                if (!String.IsNullOrEmpty(reply.ErrorMessage))
                {
                    throw new Exception(reply.ErrorMessage);
                }
            }, (eReply, eBdea) =>
            {
                throw new Exception($"ERROR: timed out - {eReply?.ErrorMessage}");
            });
            task.Wait(10000);

            if (!task.IsCompleted) throw new Exception("Timed out waiting to register dm queue with server.");
        }

        private void FindMostRecentProject()
        {
            var projects = Directory.GetDirectories(Environment.CurrentDirectory)
                                    .Where(d => !d.StartsWith(".") && !d.StartsWith("_"))
                                    .Select(d => new DirectoryInfo(d))
                                    .OrderByDescending(d => d.LastWriteTimeUtc);

            if (projects.Any())
            {
                Environment.CurrentDirectory = projects.First().FullName;
            }
        }

        private void Aica_UserAICInstallReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            throw new NotImplementedException();
        }

        private void Aica_UserGetDataReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            if (e.Payload.AICSkillName is null)
            {
                if (!String.IsNullOrEmpty(e.Payload.Content))
                {
                    Console.WriteLine("test");
                    var di = new DirectoryInfo(Path.Combine(Environment.CurrentDirectory, "..", e.Payload.Content));
                    if (!di.Exists)
                    {
                        di.Create();
                        Environment.CurrentDirectory = di.FullName;
                        ExecuteCommand(Environment.CurrentDirectory, "aic -replay");

                    }
                    else Environment.CurrentDirectory = di.FullName;
                }
                PopulateProjectSSoTAndReadme(e.Payload);
            }
            else
            {
                if (e.Payload.AICSkillName == $"{AICSkills.Enum.GetProjectList}")
                {
                    string parentDir = Environment.CurrentDirectory + "\\..";
                    DirectoryInfo info = new DirectoryInfo(parentDir);
                    e.Payload.Projects = info.EnumerateDirectories().OrderByDescending(d => (d.LastWriteTime)).ThenBy(d => (d.Name)).Select(d => (d.FullName)).ToArray();
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.RequestReplay}")
                {
                    ExecuteCommand(Environment.CurrentDirectory, "aic -replay");
                    PopulateProjectSSoTAndReadme(e.Payload);
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.RequestReplayAll}")
                {
                    ExecuteCommand(Environment.CurrentDirectory, "aic -replayall");
                    PopulateProjectSSoTAndReadme(e.Payload);
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.GetFileList}")
                {
                    var fileName = Path.Combine(Environment.CurrentDirectory, e.Payload.FileName.Trim("/\\".ToCharArray()));
                    if (File.Exists(fileName))
                    {
                        e.Payload.Content = File.ReadAllText(fileName);
                    }
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.GetBackupList}")
                {
                    // Temporarily disabled for performance reasons
                    //string metaDir = Path.Combine(Environment.CurrentDirectory, "AICapture");
                    //string zipDir = Path.Combine(metaDir, "Backup");
                    //e.Payload.Contents = Directory.GetFiles(zipDir).OrderByDescending(f => f).ToArray();
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.GetConversationList}")
                {
                    string metaDir = Path.Combine(Environment.CurrentDirectory, "AICapture");
                    string logDir = Path.Combine(metaDir, "Transcripts");
                    e.Payload.Contents = Directory.GetFiles(logDir).OrderByDescending(f => f).ToArray();
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.GetConversationDetails}")
                {
                    string metaDir = Path.Combine(Environment.CurrentDirectory, "AICapture");
                    string logDir = Path.Combine(metaDir, "Transcripts");
                    string logFile = Path.Combine(logDir, e.Payload.Content);
                    if (!File.Exists(logFile))
                    {
                        e.Payload.ErrorMessage = String.Format("Log file \"{0}\" not found.", logFile);
                        return;
                    }
                    var lines = File.ReadLines(logFile);
                    e.Payload.Transcripts = new List<TranscriptEntry>();
                    foreach (var line in lines)
                    {
                        TranscriptEntry transcriptEntry = JsonConvert.DeserializeObject<TranscriptEntry>(line);
                        e.Payload.Transcripts.Add(transcriptEntry);
                    }
                }
            }
        }

        private void PopulateProjectSSoTAndReadme(StandardPayload payload)
        {
            payload.AICaptureProjectFolder = $"/{Path.GetFileName(Environment.CurrentDirectory)}";
            Directory.SetLastWriteTime(Environment.CurrentDirectory, DateTime.Now);
            var defaultSSOT = $"{{ {Environment.NewLine}   \"project\":{{    \"name\":\"{Path.GetFileName(Environment.CurrentDirectory)}\"{Environment.NewLine}}}{Environment.NewLine}}}";
            var found = this.LookFor("single-source-of-truth.json", payload, true, defaultSSOT);
            this.LookFor("README.md", payload, false);
        }

        private void Aica_UserSetDataReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            if (e.Payload.AICSkillName is null)
            {
                if (String.IsNullOrEmpty(e.Payload.FileName)) return;
                var fileName = Path.Combine(Environment.CurrentDirectory, e.Payload.FileName.Trim("\\/".ToCharArray()));
                var fileFI = new FileInfo(fileName);
                var patch = $"{e.Payload.Content}";
                var patchFI = new FileInfo(Path.Combine(fileFI.Directory.FullName, "__patch.json"));
                if (fileFI.Exists && patch.Contains("op"))
                {
                    File.WriteAllText(patchFI.FullName, patch);
                    //this.PatchAndReplayAll(new DirectoryInfo(Environment.CurrentDirectory), fileFI, patchFI);
                    this.PatchAndReplayAllNuget(new DirectoryInfo(Environment.CurrentDirectory), fileFI, patch);
                }
            }
            else
            {
                if (e.Payload.AICSkillName == $"{AICSkills.Enum.ChangeProject}")
                {
                    Environment.CurrentDirectory = e.Payload.Content;
                    Console.WriteLine("Current directory changed to " + Environment.CurrentDirectory);
                }
                else if (e.Payload.AICSkillName == "CreateProject")
                {
                    string dir = Environment.CurrentDirectory + "\\..\\" + e.Payload.Content;
                    if (Directory.Exists(dir))
                    {
                        e.Payload.ErrorMessage = string.Format("Directory \"{0}\" already exists.", dir);
                        return;
                    }
                    DirectoryInfo di = Directory.CreateDirectory(dir);
                    Environment.CurrentDirectory = dir;
                    DataClasses.AICaptureProject.Init();
                    Console.WriteLine("New project created at " + Environment.CurrentDirectory);

                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.SaveTranscript}")
                {
                    string metaDir = Path.Combine(Environment.CurrentDirectory, "AICapture");
                    string logDir = Path.Combine(metaDir, "Transcripts");
                    if (!Directory.Exists(metaDir))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(metaDir);
                    }
                    if (!Directory.Exists(logDir))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(logDir);
                    }
                    TranscriptEntry entry = new TranscriptEntry();
                    entry.Time = e.Payload.Contents[0];
                    entry.Type = e.Payload.Contents[1];
                    entry.Text = e.Payload.Contents[2];
                    string isNew = e.Payload.Contents[3];
                    string fileName = e.Payload.Contents[4];
                    entry.ParentMessageId = e.Payload.Contents[5];
                    entry.ConversationId = e.Payload.Contents[6];
                    entry.IsHidden = e.Payload.Contents[7];
                    string entryText = JsonConvert.SerializeObject(entry);
                    string transcriptFile = Path.Combine(logDir, fileName);
                    File.AppendAllText(transcriptFile, entryText + Environment.NewLine);
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.SaveBackup}")
                {
                    SaveBackup();
                }
                else if (e.Payload.AICSkillName == $"{AICSkills.Enum.RestoreBackup}")
                {
                    if (e.Payload.Content is null)
                    {
                        e.Payload.ErrorMessage = "No backup file specified to restore from.";
                        return;
                    }
                    FileInfo fi = new FileInfo(e.Payload.Content);
                    if (!fi.Exists)
                    {
                        e.Payload.ErrorMessage = String.Format("Backup file \"{0}\" does not exist.", e.Payload.Content);
                        return;
                    }
                    SaveBackup();

                    string baseDir = Environment.CurrentDirectory;
                    DirectoryInfo di = new DirectoryInfo(baseDir);
                    foreach (FileInfo file in di.GetFiles())
                    {
                        file.Delete();
                    }
                    foreach (DirectoryInfo dir in di.GetDirectories())
                    {
                        if (dir.Name.EndsWith("AICapture"))
                        {
                            continue;
                        }
                        dir.Delete(true);
                    }
                    DirectoryInfo di2 = new DirectoryInfo(Path.Combine(baseDir, "AICapture"));
                    foreach (FileInfo file in di2.GetFiles())
                    {
                        file.Delete();
                    }
                    try
                    {
                        ZipFile.ExtractToDirectory(e.Payload.Content, Path.Combine(baseDir, ".."));
                    }
                    catch (Exception ex)
                    {
                        e.Payload.ErrorMessage = ex.Message;
                    }
                }
            }
        }

        private bool SaveBackup()
        {
            string metaDir = Path.Combine(Environment.CurrentDirectory, "AICapture");
            string zipDir = Path.Combine(metaDir, "Backup");
            if (!Directory.Exists(metaDir))
            {
                DirectoryInfo di = Directory.CreateDirectory(metaDir);
            }
            if (!Directory.Exists(zipDir))
            {
                DirectoryInfo di = Directory.CreateDirectory(zipDir);
            }
            string now = DateTime.Now.ToString("s");
            now = now.Replace(":", "-");
            string destFile = Path.Combine(zipDir, now + ".zip");

            ZipHelper.CreateFromDirectory(
                Environment.CurrentDirectory, destFile, CompressionLevel.Fastest, true, Encoding.UTF8,
                fileName => !fileName.Contains(@"\Backup\")
            );
            return true;
        }

        private bool LookFor(string fileName, StandardPayload payload, bool checkSSoT, string defaultFileContents = null)
        {
            var fi = new FileInfo(fileName);
            if (fi.Exists) return FoundFile(payload, fi);
            if (checkSSoT)
            {
                fi = new FileInfo(Path.Combine("ssot", fileName));
                if (fi.Exists) return FoundFile(payload, fi);
                if (!String.IsNullOrEmpty(defaultFileContents))
                {
                    if (!fi.Directory.Exists) fi.Directory.Create();
                    File.WriteAllText(fi.FullName, defaultFileContents);
                    return true;
                }
            }
            return false;
        }

        private bool FoundFile(StandardPayload payload, FileInfo fi)
        {
            if (fi.Name == "README.md")
            {
                payload.README = File.ReadAllText(fi.FullName);
            }
            else
            {
                payload.FileName = fi.FullName.Substring(Environment.CurrentDirectory.Length);
                payload.Content = File.ReadAllText(fi.FullName);
            }
            return true;
        }

        private void PatchAndReplayAll(DirectoryInfo projectRootPath, FileInfo fileFI, FileInfo patchFI)
        {
            // 1) issue the command > json-patch --json fileinfo.filename --patch patchfi.fullname
            var patchCommand = $"json-patch --json {fileFI.Name} --patch {patchFI.FullName}";
            ExecuteCommand(fileFI.DirectoryName, patchCommand);
            Task.Factory.StartNew(() =>
            {
                System.Threading.Thread.Sleep(5000);
                patchFI.Delete();
            });

            // 2) issue the command > ssotme -replayall
            var replayCommand = "ssotme -replay";
            ExecuteCommand(projectRootPath.FullName, replayCommand);
        }

        private void PatchAndReplayAllNuget(DirectoryInfo projectRootPath, FileInfo fileFI, string patch)
        {
            //var json = File.ReadAllText(fileFI.FullName);
            //var jsonObj = JsonConvert.DeserializeObject(json);
            //var ops = JsonConvert.DeserializeObject<List<Microsoft.AspNetCore.JsonPatch.Operations.Operation>>(patch);
            //var patchDocument = new Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(ops, new Newtonsoft.Json.Serialization.DefaultContractResolver());
            //patchDocument.ApplyTo(jsonObj);
            //File.WriteAllText(fileFI.FullName, JsonConvert.SerializeObject(jsonObj));

            //// 2) issue the command > ssotme -replayall
            //var replayCommand = "ssotme -replay";
            //ExecuteCommand(projectRootPath.FullName, replayCommand);

        }

        private void ExecuteCommand(string workingDirectory, string command)
        {

            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    RedirectStandardInput = true,
                    RedirectStandardOutput = true, // Added to redirect output
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    WorkingDirectory = workingDirectory
                }
            };
            var result = process.Start();
            using (var sw = process.StandardInput)
            {
                if (sw.BaseStream.CanWrite)
                {
                    Console.WriteLine($"INVOKING: {command}");
                    sw.WriteLine(command);
                    sw.WriteLine();
                    sw.WriteLine();
                    sw.WriteLine();
                }
            }
            // Added to block until the process completes or times out
            if (process.WaitForExit(30000))
            {
                Console.WriteLine(process.StandardOutput.ReadToEnd()); // Logs the output
            }
            else
            {
                Console.WriteLine(process.StandardOutput.ReadToEnd()); // Logs the output
                Console.WriteLine("Process timed out");
            }
        }

        private void Aica_UserAICReplayReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            throw new Exception("Not setup to replay yet...");
        }
    }
}
