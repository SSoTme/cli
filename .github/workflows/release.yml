name: Release
on:
  pull_request:
    types: [closed]
    branches: [ "main" ]

jobs:

  # On PR merge into main, create a release with the PR description
  release:
    name: Publish Package
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure git remote with token
        run: |
          git remote set-url origin \
          "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

      - name: Get PR Description
        id: pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Save PR body to a file
          printf '%s\n' "${{ github.event.pull_request.body }}" > notes.txt

          # Safely write multiline PR body to the output
          {
            echo "description<<EOF"
            cat notes.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Fetch Package Version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          git fetch --tags
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "Tag v$VERSION already exists, skipping release"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        if: steps.version.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --draft \
            --title "Release ${{ steps.version.outputs.version }}" \
            --notes-file notes.txt \
            --target ${{ github.sha }}
